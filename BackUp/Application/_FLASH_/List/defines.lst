###############################################################################
#
# IAR C/C++ Compiler V7.30.3.1659 for Microchip AVR       13/Sep/2024  17:30:02
# Copyright 1996-2020 IAR Systems AB.
#
#    Source file  =  
#        D:\Project\NewStructure\NT6004R14\Application\Core\defines.c
#    Command line =  
#        -f C:\Users\Mohammad\AppData\Local\Temp\EWB4F7.tmp
#        (D:\Project\NewStructure\NT6004R14\Application\Core\defines.c
#        --cpu=m32 -ms -o
#        D:\Project\NewStructure\NT6004R14\Application\_FLASH_\Obj -D NDEBUG
#        -lC D:\Project\NewStructure\NT6004R14\Application\_FLASH_\List -lA
#        D:\Project\NewStructure\NT6004R14\Application\_FLASH_\List
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I
#        D:\Project\NewStructure\NT6004R14\Application\Application\\ -I
#        D:\Project\NewStructure\NT6004R14\Application\Core\\ -I
#        D:\Project\NewStructure\NT6004R14\Application\Driver\\ -I
#        D:\Project\NewStructure\NT6004R14\Application\Config\\ -I
#        D:\Project\NewStructure\NT6004R14\Application\Module\\ -I
#        D:\Project\NewStructure\NT6004R14\Application\Class\\ --eeprom_size
#        1024 --dlib --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.4\avr\LIB\DLIB\dlAVR-3s-ec_mul-sf-n.h" --ec++ -On)
#    Locale       =  English_USA.1252
#    List file    =  
#        D:\Project\NewStructure\NT6004R14\Application\_FLASH_\List\defines.lst
#    Object file  =  
#        D:\Project\NewStructure\NT6004R14\Application\_FLASH_\Obj\defines.r90
#
###############################################################################

D:\Project\NewStructure\NT6004R14\Application\Core\defines.c
      1          /************************************************** Description *******************************************************/
      2          /*
      3              File : define.c
      4              Programmer : Mohammad Lotfi
      5              Used : Refrence and define basical for a microcontroller
      6              Design Pattern : Nothing
      7              Types of memory : Nothing
      8              Total Tread : Nothing
      9              Site : https://www.mahsen.ir
     10              Tel : +989124662703
     11              Email : info@mahsen.ir
     12              Last Update : 2023/9/3
     13          */
     14          /************************************************** Warnings **********************************************************/
     15          /*
     16              Nothing
     17          */
     18          /************************************************** Wizards ***********************************************************/
     19          /*
     20              Nothing
     21          */
     22          /************************************************** Includes **********************************************************/
     23          #include "defines.h"
     24          /************************************************** Defineds **********************************************************/
     25          /*
     26              Nothing
     27          */
     28          /************************************************** Names *************************************************************/
     29          /*
     30              Nothing
     31          */
     32          /************************************************** Variables *********************************************************/
     33          /*
     34              Nothing
     35          */
     36          /************************************************** Opjects ***********************************************************/
     37          /*
     38              Nothing
     39          */
     40          /************************************************** Functions *********************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     41          void DEFINE_Delay_ms(U32 MSecond)
   \                     DEFINE_Delay_ms:
     42          {
     43          
     44          }
   \   00000000   9508               RET
     45          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     46          void DEFINE_Delay(U32 USecond)
   \                     DEFINE_Delay:
     47          {
     48            while(USecond--)
   \                     ??DEFINE_Delay_0:
   \   00000000   0198               MOVW    R19:R18, R17:R16
   \   00000002   0189               MOVW    R17:R16, R19:R18
   \   00000004   5001               SUBI    R16, 1
   \   00000006   4010               SBCI    R17, 0
   \   00000008   2B23               OR      R18, R19
   \   0000000A   F041               BREQ    ??DEFINE_Delay_1
     49            {
     50                  for(U32 i=0; i<(16/6); i++);
   \   0000000C   E0E0               LDI     R30, 0
   \   0000000E   E0F0               LDI     R31, 0
   \                     ??DEFINE_Delay_2:
   \   00000010   30E2               CPI     R30, 2
   \   00000012   E020               LDI     R18, 0
   \   00000014   07F2               CPC     R31, R18
   \   00000016   F7A0               BRCC    ??DEFINE_Delay_0
   \   00000018   9631               ADIW    R31:R30, 1
   \   0000001A   CFFA               RJMP    ??DEFINE_Delay_2
     51            }
     52          }
   \                     ??DEFINE_Delay_1:
   \   0000001C   9508               RET
     53          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     54          U8 DEFINE_Ascii2Hex(U8 Convert)
   \                     DEFINE_Ascii2Hex:
     55          {
   \   00000000   2F10               MOV     R17, R16
     56          	
     57                if((Convert >= '0') && (Convert <= '9'))
   \   00000002   3310               CPI     R17, 48
   \   00000004   F028               BRCS    ??DEFINE_Ascii2Hex_0
   \   00000006   331A               CPI     R17, 58
   \   00000008   F418               BRCC    ??DEFINE_Ascii2Hex_0
     58                {
     59                        return (Convert - '0' + 0x00);
   \   0000000A   5310               SUBI    R17, 48
   \   0000000C   2F01               MOV     R16, R17
   \   0000000E   9508               RET
     60                }
     61                else if((Convert >= 'a') && (Convert <= 'f'))
   \                     ??DEFINE_Ascii2Hex_0:
   \   00000010   3611               CPI     R17, 97
   \   00000012   F028               BRCS    ??DEFINE_Ascii2Hex_1
   \   00000014   3617               CPI     R17, 103
   \   00000016   F418               BRCC    ??DEFINE_Ascii2Hex_1
     62                {
     63                        return (Convert - 'a' + 0x0A);			
   \   00000018   5517               SUBI    R17, 87
   \   0000001A   2F01               MOV     R16, R17
   \   0000001C   9508               RET
     64                }
     65                else if((Convert >= 'A') && (Convert <= 'F'))
   \                     ??DEFINE_Ascii2Hex_1:
   \   0000001E   3411               CPI     R17, 65
   \   00000020   F028               BRCS    ??DEFINE_Ascii2Hex_2
   \   00000022   3417               CPI     R17, 71
   \   00000024   F418               BRCC    ??DEFINE_Ascii2Hex_2
     66                {
     67                        return (Convert - 'A' + 0x0A);			
   \   00000026   5317               SUBI    R17, 55
   \   00000028   2F01               MOV     R16, R17
   \   0000002A   9508               RET
     68                }
     69                else
     70                {
     71                        return 0x00;
   \                     ??DEFINE_Ascii2Hex_2:
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   9508               RET
     72                }
     73          }
     74          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     75          U8* DEFINE_itoa(U64 Value, U8* Length) //0-4294967295
   \                     DEFINE_itoa:
     76          {   
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   0148               MOVW    R9:R8, R17:R16
   \   00000006   0159               MOVW    R11:R10, R19:R18
   \   00000008   016A               MOVW    R13:R12, R21:R20
   \   0000000A   017B               MOVW    R15:R14, R23:R22
     77              static U8 str_b[10+1]; 
     78              
     79              if(Value==0)
   \   0000000C   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000000E   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000010   ........           CALL    ?LL_CMP_R8_L12
   \   00000014   F439               BRNE    ??DEFINE_itoa_0
     80              {
     81                  *Length = 1;
   \   00000016   89E8               LDD     R30, Y+16
   \   00000018   89F9               LDD     R31, Y+17
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8300               ST      Z, R16
     82                  return (U8*)"0";
   \   0000001E   ....               LDI     R16, LOW(`?<Constant "0">`)
   \   00000020   ....               LDI     R17, (`?<Constant "0">`) >> 8
   \   00000022   C0F3               RJMP    ??DEFINE_itoa_1
     83              }
     84                  
     85              str_b[9] = (Value%10)+'0';
   \                     ??DEFINE_itoa_0:
   \   00000024   ....               LDI     R26, LOW(__Constant_a_0)
   \   00000026   ....               LDI     R27, (__Constant_a_0) >> 8
   \   00000028   0184               MOVW    R17:R16, R9:R8
   \   0000002A   0195               MOVW    R19:R18, R11:R10
   \   0000002C   01A6               MOVW    R21:R20, R13:R12
   \   0000002E   01B7               MOVW    R23:R22, R15:R14
   \   00000030   ........           CALL    ?ULL_MOD_L12
   \   00000034   5D00               SUBI    R16, 208
   \   00000036   9300....           STS     (??str_b + 9), R16
     86              str_b[8] = ((Value%100)/10)+'0';
   \   0000003A   ....               LDI     R26, LOW(__Constant_64_0)
   \   0000003C   ....               LDI     R27, (__Constant_64_0) >> 8
   \   0000003E   0184               MOVW    R17:R16, R9:R8
   \   00000040   0195               MOVW    R19:R18, R11:R10
   \   00000042   01A6               MOVW    R21:R20, R13:R12
   \   00000044   01B7               MOVW    R23:R22, R15:R14
   \   00000046   ........           CALL    ?ULL_MOD_L12
   \   0000004A   0108               MOVW    R1:R0, R17:R16
   \   0000004C   0119               MOVW    R3:R2, R19:R18
   \   0000004E   012A               MOVW    R5:R4, R21:R20
   \   00000050   013B               MOVW    R7:R6, R23:R22
   \   00000052   ....               LDI     R26, LOW(__Constant_a_0)
   \   00000054   ....               LDI     R27, (__Constant_a_0) >> 8
   \   00000056   0180               MOVW    R17:R16, R1:R0
   \   00000058   0191               MOVW    R19:R18, R3:R2
   \   0000005A   01A2               MOVW    R21:R20, R5:R4
   \   0000005C   01B3               MOVW    R23:R22, R7:R6
   \   0000005E   ........           CALL    ?ULL_DIV_L12
   \   00000062   5D00               SUBI    R16, 208
   \   00000064   9300....           STS     (??str_b + 8), R16
     87              str_b[7] = ((Value%1000)/100)+'0';
   \   00000068   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   0000006A   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   0000006C   0184               MOVW    R17:R16, R9:R8
   \   0000006E   0195               MOVW    R19:R18, R11:R10
   \   00000070   01A6               MOVW    R21:R20, R13:R12
   \   00000072   01B7               MOVW    R23:R22, R15:R14
   \   00000074   ........           CALL    ?ULL_MOD_L12
   \   00000078   0108               MOVW    R1:R0, R17:R16
   \   0000007A   0119               MOVW    R3:R2, R19:R18
   \   0000007C   012A               MOVW    R5:R4, R21:R20
   \   0000007E   013B               MOVW    R7:R6, R23:R22
   \   00000080   ....               LDI     R26, LOW(__Constant_64_0)
   \   00000082   ....               LDI     R27, (__Constant_64_0) >> 8
   \   00000084   0180               MOVW    R17:R16, R1:R0
   \   00000086   0191               MOVW    R19:R18, R3:R2
   \   00000088   01A2               MOVW    R21:R20, R5:R4
   \   0000008A   01B3               MOVW    R23:R22, R7:R6
   \   0000008C   ........           CALL    ?ULL_DIV_L12
   \   00000090   5D00               SUBI    R16, 208
   \   00000092   9300....           STS     (??str_b + 7), R16
     88              str_b[6] = ((Value%10000)/1000)+'0';
   \   00000096   ....               LDI     R26, LOW(__Constant_2710_0)
   \   00000098   ....               LDI     R27, (__Constant_2710_0) >> 8
   \   0000009A   0184               MOVW    R17:R16, R9:R8
   \   0000009C   0195               MOVW    R19:R18, R11:R10
   \   0000009E   01A6               MOVW    R21:R20, R13:R12
   \   000000A0   01B7               MOVW    R23:R22, R15:R14
   \   000000A2   ........           CALL    ?ULL_MOD_L12
   \   000000A6   0108               MOVW    R1:R0, R17:R16
   \   000000A8   0119               MOVW    R3:R2, R19:R18
   \   000000AA   012A               MOVW    R5:R4, R21:R20
   \   000000AC   013B               MOVW    R7:R6, R23:R22
   \   000000AE   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   000000B0   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   000000B2   0180               MOVW    R17:R16, R1:R0
   \   000000B4   0191               MOVW    R19:R18, R3:R2
   \   000000B6   01A2               MOVW    R21:R20, R5:R4
   \   000000B8   01B3               MOVW    R23:R22, R7:R6
   \   000000BA   ........           CALL    ?ULL_DIV_L12
   \   000000BE   5D00               SUBI    R16, 208
   \   000000C0   9300....           STS     (??str_b + 6), R16
     89              str_b[5] = ((Value%100000)/10000)+'0';
   \   000000C4   ....               LDI     R26, LOW(__Constant_186a0_0)
   \   000000C6   ....               LDI     R27, (__Constant_186a0_0) >> 8
   \   000000C8   0184               MOVW    R17:R16, R9:R8
   \   000000CA   0195               MOVW    R19:R18, R11:R10
   \   000000CC   01A6               MOVW    R21:R20, R13:R12
   \   000000CE   01B7               MOVW    R23:R22, R15:R14
   \   000000D0   ........           CALL    ?ULL_MOD_L12
   \   000000D4   0108               MOVW    R1:R0, R17:R16
   \   000000D6   0119               MOVW    R3:R2, R19:R18
   \   000000D8   012A               MOVW    R5:R4, R21:R20
   \   000000DA   013B               MOVW    R7:R6, R23:R22
   \   000000DC   ....               LDI     R26, LOW(__Constant_2710_0)
   \   000000DE   ....               LDI     R27, (__Constant_2710_0) >> 8
   \   000000E0   0180               MOVW    R17:R16, R1:R0
   \   000000E2   0191               MOVW    R19:R18, R3:R2
   \   000000E4   01A2               MOVW    R21:R20, R5:R4
   \   000000E6   01B3               MOVW    R23:R22, R7:R6
   \   000000E8   ........           CALL    ?ULL_DIV_L12
   \   000000EC   5D00               SUBI    R16, 208
   \   000000EE   9300....           STS     (??str_b + 5), R16
     90              str_b[4] = ((Value%1000000)/100000)+'0';
   \   000000F2   ....               LDI     R26, LOW(__Constant_f4240_0)
   \   000000F4   ....               LDI     R27, (__Constant_f4240_0) >> 8
   \   000000F6   0184               MOVW    R17:R16, R9:R8
   \   000000F8   0195               MOVW    R19:R18, R11:R10
   \   000000FA   01A6               MOVW    R21:R20, R13:R12
   \   000000FC   01B7               MOVW    R23:R22, R15:R14
   \   000000FE   ........           CALL    ?ULL_MOD_L12
   \   00000102   0108               MOVW    R1:R0, R17:R16
   \   00000104   0119               MOVW    R3:R2, R19:R18
   \   00000106   012A               MOVW    R5:R4, R21:R20
   \   00000108   013B               MOVW    R7:R6, R23:R22
   \   0000010A   ....               LDI     R26, LOW(__Constant_186a0_0)
   \   0000010C   ....               LDI     R27, (__Constant_186a0_0) >> 8
   \   0000010E   0180               MOVW    R17:R16, R1:R0
   \   00000110   0191               MOVW    R19:R18, R3:R2
   \   00000112   01A2               MOVW    R21:R20, R5:R4
   \   00000114   01B3               MOVW    R23:R22, R7:R6
   \   00000116   ........           CALL    ?ULL_DIV_L12
   \   0000011A   5D00               SUBI    R16, 208
   \   0000011C   9300....           STS     (??str_b + 4), R16
     91              str_b[3] = ((Value%10000000)/1000000)+'0';
   \   00000120   ....               LDI     R26, LOW(__Constant_989680_0)
   \   00000122   ....               LDI     R27, (__Constant_989680_0) >> 8
   \   00000124   0184               MOVW    R17:R16, R9:R8
   \   00000126   0195               MOVW    R19:R18, R11:R10
   \   00000128   01A6               MOVW    R21:R20, R13:R12
   \   0000012A   01B7               MOVW    R23:R22, R15:R14
   \   0000012C   ........           CALL    ?ULL_MOD_L12
   \   00000130   0108               MOVW    R1:R0, R17:R16
   \   00000132   0119               MOVW    R3:R2, R19:R18
   \   00000134   012A               MOVW    R5:R4, R21:R20
   \   00000136   013B               MOVW    R7:R6, R23:R22
   \   00000138   ....               LDI     R26, LOW(__Constant_f4240_0)
   \   0000013A   ....               LDI     R27, (__Constant_f4240_0) >> 8
   \   0000013C   0180               MOVW    R17:R16, R1:R0
   \   0000013E   0191               MOVW    R19:R18, R3:R2
   \   00000140   01A2               MOVW    R21:R20, R5:R4
   \   00000142   01B3               MOVW    R23:R22, R7:R6
   \   00000144   ........           CALL    ?ULL_DIV_L12
   \   00000148   5D00               SUBI    R16, 208
   \   0000014A   9300....           STS     (??str_b + 3), R16
     92              str_b[2] = ((Value%100000000)/10000000)+'0';
   \   0000014E   ....               LDI     R26, LOW(__Constant_5f5e100_0)
   \   00000150   ....               LDI     R27, (__Constant_5f5e100_0) >> 8
   \   00000152   0184               MOVW    R17:R16, R9:R8
   \   00000154   0195               MOVW    R19:R18, R11:R10
   \   00000156   01A6               MOVW    R21:R20, R13:R12
   \   00000158   01B7               MOVW    R23:R22, R15:R14
   \   0000015A   ........           CALL    ?ULL_MOD_L12
   \   0000015E   0108               MOVW    R1:R0, R17:R16
   \   00000160   0119               MOVW    R3:R2, R19:R18
   \   00000162   012A               MOVW    R5:R4, R21:R20
   \   00000164   013B               MOVW    R7:R6, R23:R22
   \   00000166   ....               LDI     R26, LOW(__Constant_989680_0)
   \   00000168   ....               LDI     R27, (__Constant_989680_0) >> 8
   \   0000016A   0180               MOVW    R17:R16, R1:R0
   \   0000016C   0191               MOVW    R19:R18, R3:R2
   \   0000016E   01A2               MOVW    R21:R20, R5:R4
   \   00000170   01B3               MOVW    R23:R22, R7:R6
   \   00000172   ........           CALL    ?ULL_DIV_L12
   \   00000176   5D00               SUBI    R16, 208
   \   00000178   9300....           STS     (??str_b + 2), R16
     93              str_b[1] = ((Value%1000000000)/100000000)+'0';
   \   0000017C   ....               LDI     R26, LOW(__Constant_3b9aca00_0)
   \   0000017E   ....               LDI     R27, (__Constant_3b9aca00_0) >> 8
   \   00000180   0184               MOVW    R17:R16, R9:R8
   \   00000182   0195               MOVW    R19:R18, R11:R10
   \   00000184   01A6               MOVW    R21:R20, R13:R12
   \   00000186   01B7               MOVW    R23:R22, R15:R14
   \   00000188   ........           CALL    ?ULL_MOD_L12
   \   0000018C   0108               MOVW    R1:R0, R17:R16
   \   0000018E   0119               MOVW    R3:R2, R19:R18
   \   00000190   012A               MOVW    R5:R4, R21:R20
   \   00000192   013B               MOVW    R7:R6, R23:R22
   \   00000194   ....               LDI     R26, LOW(__Constant_5f5e100_0)
   \   00000196   ....               LDI     R27, (__Constant_5f5e100_0) >> 8
   \   00000198   0180               MOVW    R17:R16, R1:R0
   \   0000019A   0191               MOVW    R19:R18, R3:R2
   \   0000019C   01A2               MOVW    R21:R20, R5:R4
   \   0000019E   01B3               MOVW    R23:R22, R7:R6
   \   000001A0   ........           CALL    ?ULL_DIV_L12
   \   000001A4   5D00               SUBI    R16, 208
   \   000001A6   9300....           STS     (??str_b + 1), R16
     94              str_b[0] = ((Value%10000000000)/1000000000)+'0';
   \   000001AA   ....               LDI     R26, LOW(__Constant_540be400_2)
   \   000001AC   ....               LDI     R27, (__Constant_540be400_2) >> 8
   \   000001AE   0184               MOVW    R17:R16, R9:R8
   \   000001B0   0195               MOVW    R19:R18, R11:R10
   \   000001B2   01A6               MOVW    R21:R20, R13:R12
   \   000001B4   01B7               MOVW    R23:R22, R15:R14
   \   000001B6   ........           CALL    ?ULL_MOD_L12
   \   000001BA   0108               MOVW    R1:R0, R17:R16
   \   000001BC   0119               MOVW    R3:R2, R19:R18
   \   000001BE   012A               MOVW    R5:R4, R21:R20
   \   000001C0   013B               MOVW    R7:R6, R23:R22
   \   000001C2   ....               LDI     R26, LOW(__Constant_3b9aca00_0)
   \   000001C4   ....               LDI     R27, (__Constant_3b9aca00_0) >> 8
   \   000001C6   0180               MOVW    R17:R16, R1:R0
   \   000001C8   0191               MOVW    R19:R18, R3:R2
   \   000001CA   01A2               MOVW    R21:R20, R5:R4
   \   000001CC   01B3               MOVW    R23:R22, R7:R6
   \   000001CE   ........           CALL    ?ULL_DIV_L12
   \   000001D2   5D00               SUBI    R16, 208
   \   000001D4   9300....           STS     ??str_b, R16
     95              
     96              int last=0;
   \   000001D8   E020               LDI     R18, 0
   \   000001DA   E030               LDI     R19, 0
     97              for(int index=(sizeof(str_b)-1); index>=0; index--)
   \   000001DC   E08A               LDI     R24, 10
   \   000001DE   E090               LDI     R25, 0
   \                     ??DEFINE_itoa_2:
   \   000001E0   2399               TST     R25
   \   000001E2   F04A               BRMI    ??DEFINE_itoa_3
     98              {
     99                  if(str_b[index] != '0')
   \   000001E4   01FC               MOVW    R31:R30, R25:R24
   \   000001E6   ....               SUBI    R30, LOW((-(??str_b) & 0xFFFF))
   \   000001E8   ....               SBCI    R31, (-(??str_b) & 0xFFFF) >> 8
   \   000001EA   8100               LD      R16, Z
   \   000001EC   3300               CPI     R16, 48
   \   000001EE   F009               BREQ    ??DEFINE_itoa_4
    100                  {
    101                      last = index;
   \   000001F0   019C               MOVW    R19:R18, R25:R24
    102                  }
    103              }
   \                     ??DEFINE_itoa_4:
   \   000001F2   9701               SBIW    R25:R24, 1
   \   000001F4   CFF5               RJMP    ??DEFINE_itoa_2
    104              
    105              *Length = 10 - last;
   \                     ??DEFINE_itoa_3:
   \   000001F6   E00A               LDI     R16, 10
   \   000001F8   2F12               MOV     R17, R18
   \   000001FA   1B01               SUB     R16, R17
   \   000001FC   89E8               LDD     R30, Y+16
   \   000001FE   89F9               LDD     R31, Y+17
   \   00000200   8300               ST      Z, R16
    106              return &str_b[last];
   \   00000202   ....               LDI     R16, LOW(??str_b)
   \   00000204   ....               LDI     R17, (??str_b) >> 8
   \   00000206   0F02               ADD     R16, R18
   \   00000208   1F13               ADC     R17, R19
   \                     ??DEFINE_itoa_1:
   \   0000020A   E1E2               LDI     R30, 18
   \   0000020C   ........           JMP     ?EPILOGUE_B16_L09
    107          }

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??str_b:
   \   00000000                      DS8 11

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "0">>`:
   \   00000000   0030               DC8 "0"

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_0`:
   \   00000000   000000000000       DD 0, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_1`:
   \   00000000   000A00000000       DD 10, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_2`:
   \   00000000   006400000000       DD 100, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_3`:
   \   00000000   03E800000000       DD 1000, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_4`:
   \   00000000   271000000000       DD 10000, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_5`:
   \   00000000   86A000010000       DD 100000, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_6`:
   \   00000000   4240000F0000       DD 1000000, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_7`:
   \   00000000   968000980000       DD 10000000, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_8`:
   \   00000000   E10005F50000       DD 100000000, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_9`:
   \   00000000   CA003B9A0000       DD 1000000000, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_10`:
   \   00000000   E400540B0002       DD 1410065408, 2
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "0">`:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for <Constant "0">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_0_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_0`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_a_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_1`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_64_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_2`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_3e8_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_3`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_2710_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_4`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_186a0_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_5`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_f4240_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_6`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_989680_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_7`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_5f5e100_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_8`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_3b9aca00_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_9`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_540be400_2:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_10`
    108          /************************************************** Tasks *************************************************************/
    109          /*
    110              Nothing
    111          */
    112          /************************************************** Vectors ***********************************************************/
    113          /*
    114              Nothing
    115          */
    116          /**********************************************************************************************************************/
    117          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   DEFINE_Ascii2Hex
      0      2   DEFINE_Delay
      0      2   DEFINE_Delay_ms
     18      2   DEFINE_itoa
       18      2 ?LL_CMP_R8_L12
       18      2 ?ULL_DIV_L12
       18      2 ?ULL_MOD_L12


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant "0">
       8  ?<Initializer for 64 Bit Constant>_0
       8  ?<Initializer for 64 Bit Constant>_1
       8  ?<Initializer for 64 Bit Constant>_10
       8  ?<Initializer for 64 Bit Constant>_2
       8  ?<Initializer for 64 Bit Constant>_3
       8  ?<Initializer for 64 Bit Constant>_4
       8  ?<Initializer for 64 Bit Constant>_5
       8  ?<Initializer for 64 Bit Constant>_6
       8  ?<Initializer for 64 Bit Constant>_7
       8  ?<Initializer for 64 Bit Constant>_8
       8  ?<Initializer for 64 Bit Constant>_9
       2  ?<Initializer for <Constant "0">>
      48  DEFINE_Ascii2Hex
      30  DEFINE_Delay
       2  DEFINE_Delay_ms
     528  DEFINE_itoa
       8  __Constant_0_0
       8  __Constant_186a0_0
       8  __Constant_2710_0
       8  __Constant_3b9aca00_0
       8  __Constant_3e8_0
       8  __Constant_540be400_2
       8  __Constant_5f5e100_0
       8  __Constant_64_0
       8  __Constant_989680_0
       8  __Constant_a_0
       8  __Constant_f4240_0
      11  str_b
      12  -- Other

 
 608 bytes in segment CODE
  12 bytes in segment INITTAB
  90 bytes in segment NEAR_I
  90 bytes in segment NEAR_ID
  11 bytes in segment NEAR_Z
 
 610 bytes of CODE memory (+ 100 bytes shared)
  13 bytes of DATA memory (+  88 bytes shared)

Errors: none
Warnings: none
