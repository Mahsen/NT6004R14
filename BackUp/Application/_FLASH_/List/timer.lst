###############################################################################
#
# IAR C/C++ Compiler V7.30.3.1659 for Microchip AVR       13/Sep/2024  17:30:02
# Copyright 1996-2020 IAR Systems AB.
#
#    Source file  =  
#        D:\Project\NewStructure\NT6004R14\Application\Driver\timer.c
#    Command line =  
#        -f C:\Users\Mohammad\AppData\Local\Temp\EWB5C7.tmp
#        (D:\Project\NewStructure\NT6004R14\Application\Driver\timer.c
#        --cpu=m32 -ms -o
#        D:\Project\NewStructure\NT6004R14\Application\_FLASH_\Obj -D NDEBUG
#        -lC D:\Project\NewStructure\NT6004R14\Application\_FLASH_\List -lA
#        D:\Project\NewStructure\NT6004R14\Application\_FLASH_\List
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I
#        D:\Project\NewStructure\NT6004R14\Application\Application\\ -I
#        D:\Project\NewStructure\NT6004R14\Application\Core\\ -I
#        D:\Project\NewStructure\NT6004R14\Application\Driver\\ -I
#        D:\Project\NewStructure\NT6004R14\Application\Config\\ -I
#        D:\Project\NewStructure\NT6004R14\Application\Module\\ -I
#        D:\Project\NewStructure\NT6004R14\Application\Class\\ --eeprom_size
#        1024 --dlib --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.4\avr\LIB\DLIB\dlAVR-3s-ec_mul-sf-n.h" --ec++ -On)
#    Locale       =  English_USA.1252
#    List file    =  
#        D:\Project\NewStructure\NT6004R14\Application\_FLASH_\List\timer.lst
#    Object file  =  
#        D:\Project\NewStructure\NT6004R14\Application\_FLASH_\Obj\timer.r90
#
###############################################################################

D:\Project\NewStructure\NT6004R14\Application\Driver\timer.c
      1          /************************************************** Description *******************************************************/
      2          /*
      3              File : timer.c
      4              Programmer : Mohammad Lotfi
      5              Used : timer
      6              Design Pattern : Nothing
      7              Types of memory : Nothing
      8              Total Tread : Nothing
      9              Site : https://www.mahsen.ir
     10              Tel : +989124662703
     11              Email : info@mahsen.ir
     12              Last Update : 2023/6/10
     13          */
     14          /************************************************** Warnings **********************************************************/
     15          /*
     16              Nothing
     17          */
     18          /************************************************** Wizards ***********************************************************/
     19          /*
     20              Nothing
     21          */
     22          /************************************************** Includes **********************************************************/
     23          #include "timer.h"

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2
     24          /************************************************** Defineds **********************************************************/
     25          /*
     26              Nothing
     27          */
     28          /************************************************** Names *************************************************************/
     29          /*
     30              Nothing
     31          */
     32          /************************************************** Variables *********************************************************/
     33          struct struct_TIMER
     34          {
     35          
     36            U8 Added;
     37          
     38            struct struct_Channel
     39            {
     40              BIT Enable;
     41              U64 Count;	
     42              U64 Period;
     43              void (*Event)(void);
     44            } Channel[TIMER_MAXCHANNELTIMER];
     45            	

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     46          } Timer;
   \                     Timer:
   \   00000000                      DS8 153
     47          /************************************************** Opjects ***********************************************************/
     48          /*
     49              Nothing
     50          */
     51          /************************************************** Functions *********************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     52          void __init_Timer(void)
   \                     __init_Timer:
     53          {
     54              // Set Timer1 in CTC mode
     55              TCCR1B |= (1 << WGM12);
   \   00000000   B50E               IN      R16, 0x2E
   \   00000002   6008               ORI     R16, 0x08
   \   00000004   BD0E               OUT     0x2E, R16
     56              
     57              // Set prescaler to divide by 64
     58              TCCR1B |= (1 << CS11) | (1 << CS10);
   \   00000006   B50E               IN      R16, 0x2E
   \   00000008   6003               ORI     R16, 0x03
   \   0000000A   BD0E               OUT     0x2E, R16
     59              
     60              // Set initial compare value for 1 ms interrupt
     61              OCR1A = CalculateCompareValue(1000); //18749;
   \   0000000C   EE08               LDI     R16, 232
   \   0000000E   E013               LDI     R17, 3
   \   00000010   E020               LDI     R18, 0
   \   00000012   E030               LDI     R19, 0
   \   00000014   E040               LDI     R20, 0
   \   00000016   E050               LDI     R21, 0
   \   00000018   E060               LDI     R22, 0
   \   0000001A   E070               LDI     R23, 0
   \   0000001C   ....               RCALL   CalculateCompareValue
   \   0000001E   BD1B               OUT     0x2B, R17
   \   00000020   BD0A               OUT     0x2A, R16
     62              
     63              // Enable compare interrupt
     64              TIMSK |= (1 << OCIE1A);
   \   00000022   B709               IN      R16, 0x39
   \   00000024   6100               ORI     R16, 0x10
   \   00000026   BF09               OUT     0x39, R16
     65              
     66              // Enable global interrupts
     67              __enable_interrupt();
   \   00000028   9478               SEI
     68          }
   \   0000002A   9508               RET
   \   0000002C                      REQUIRE _A_TCCR1B
   \   0000002C                      REQUIRE _A_OCR1A
   \   0000002C                      REQUIRE _A_TIMSK
     69          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     70          U32 CalculateCompareValue(U64 frequency)
   \                     CalculateCompareValue:
     71          {
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   9768               SBIW    R29:R28, 24
   \   00000006   8B08               STD     Y+16, R16
   \   00000008   8B19               STD     Y+17, R17
   \   0000000A   8B2A               STD     Y+18, R18
   \   0000000C   8B3B               STD     Y+19, R19
   \   0000000E   8B4C               STD     Y+20, R20
   \   00000010   8B5D               STD     Y+21, R21
   \   00000012   8B6E               STD     Y+22, R22
   \   00000014   8B7F               STD     Y+23, R23
     72              U64 clockFrequency = F_CPU;
   \   00000016   E000               LDI     R16, 0
   \   00000018   E11B               LDI     R17, 27
   \   0000001A   EB27               LDI     R18, 183
   \   0000001C   E030               LDI     R19, 0
   \   0000001E   E040               LDI     R20, 0
   \   00000020   E050               LDI     R21, 0
   \   00000022   E060               LDI     R22, 0
   \   00000024   E070               LDI     R23, 0
   \   00000026   8308               ST      Y, R16
   \   00000028   8319               STD     Y+1, R17
   \   0000002A   832A               STD     Y+2, R18
   \   0000002C   833B               STD     Y+3, R19
   \   0000002E   834C               STD     Y+4, R20
   \   00000030   835D               STD     Y+5, R21
   \   00000032   836E               STD     Y+6, R22
   \   00000034   837F               STD     Y+7, R23
     73              U64 prescaler = 64UL;
   \   00000036   E400               LDI     R16, 64
   \   00000038   2E80               MOV     R8, R16
   \   0000003A   2499               CLR     R9
   \   0000003C   24AA               CLR     R10
   \   0000003E   24BB               CLR     R11
   \   00000040   24CC               CLR     R12
   \   00000042   24DD               CLR     R13
   \   00000044   24EE               CLR     R14
   \   00000046   24FF               CLR     R15
     74              U64 compareValue = (clockFrequency / (prescaler * frequency));
   \   00000048   01DE               MOVW    R27:R26, R29:R28
   \   0000004A   9650               ADIW    R27:R26, 16
   \   0000004C   0184               MOVW    R17:R16, R9:R8
   \   0000004E   0195               MOVW    R19:R18, R11:R10
   \   00000050   01A6               MOVW    R21:R20, R13:R12
   \   00000052   01B7               MOVW    R23:R22, R15:R14
   \   00000054   ........           CALL    ?LL_MUL_L12
   \   00000058   8708               STD     Y+8, R16
   \   0000005A   8719               STD     Y+9, R17
   \   0000005C   872A               STD     Y+10, R18
   \   0000005E   873B               STD     Y+11, R19
   \   00000060   874C               STD     Y+12, R20
   \   00000062   875D               STD     Y+13, R21
   \   00000064   876E               STD     Y+14, R22
   \   00000066   877F               STD     Y+15, R23
   \   00000068   8008               LD      R0, Y
   \   0000006A   8019               LDD     R1, Y+1
   \   0000006C   802A               LDD     R2, Y+2
   \   0000006E   803B               LDD     R3, Y+3
   \   00000070   804C               LDD     R4, Y+4
   \   00000072   805D               LDD     R5, Y+5
   \   00000074   806E               LDD     R6, Y+6
   \   00000076   807F               LDD     R7, Y+7
   \   00000078   01DE               MOVW    R27:R26, R29:R28
   \   0000007A   9618               ADIW    R27:R26, 8
   \   0000007C   0180               MOVW    R17:R16, R1:R0
   \   0000007E   0191               MOVW    R19:R18, R3:R2
   \   00000080   01A2               MOVW    R21:R20, R5:R4
   \   00000082   01B3               MOVW    R23:R22, R7:R6
   \   00000084   ........           CALL    ?ULL_DIV_L12
     75              
     76              return (U32)compareValue;
   \   00000088   9668               ADIW    R29:R28, 24
   \   0000008A   E1E0               LDI     R30, 16
   \   0000008C   ........           JMP     ?EPILOGUE_B16_L09
     77          }
     78          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     79          U8  TIMER_Add(U64 Period_ms, void (*Event) (void))
   \                     TIMER_Add:
     80          {
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   0148               MOVW    R9:R8, R17:R16
   \   00000006   0159               MOVW    R11:R10, R19:R18
   \   00000008   016A               MOVW    R13:R12, R21:R20
   \   0000000A   017B               MOVW    R15:R14, R23:R22
   \   0000000C   8928               LDD     R18, Y+16
   \   0000000E   8939               LDD     R19, Y+17
     81            /// Check max Channel Timer
     82            if(Timer.Added<TIMER_MAXCHANNELTIMER)
   \   00000010   9100....           LDS     R16, Timer
   \   00000014   3008               CPI     R16, 8
   \   00000016   F008               BRCS    $+2+2
   \   00000018   C04F               RJMP    ??TIMER_Add_0
     83            {		
     84              __disable_interrupt();
   \   0000001A   94F8               CLI
     85              Timer.Channel[Timer.Added].Count = RESET;
   \   0000001C   9100....           LDS     R16, Timer
   \   00000020   E010               LDI     R17, 0
   \   00000022   E143               LDI     R20, 19
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   00000030   E000               LDI     R16, 0
   \   00000032   8302               STD     Z+2, R16
   \   00000034   E000               LDI     R16, 0
   \   00000036   8303               STD     Z+3, R16
   \   00000038   E000               LDI     R16, 0
   \   0000003A   8304               STD     Z+4, R16
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   8305               STD     Z+5, R16
   \   00000040   E000               LDI     R16, 0
   \   00000042   8306               STD     Z+6, R16
   \   00000044   E000               LDI     R16, 0
   \   00000046   8307               STD     Z+7, R16
   \   00000048   E000               LDI     R16, 0
   \   0000004A   8700               STD     Z+8, R16
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   8701               STD     Z+9, R16
     86              Timer.Channel[Timer.Added].Period = Period_ms;
   \   00000050   9100....           LDS     R16, Timer
   \   00000054   E010               LDI     R17, 0
   \   00000056   E143               LDI     R20, 19
   \   00000058   E050               LDI     R21, 0
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   00000064   8682               STD     Z+10, R8
   \   00000066   8693               STD     Z+11, R9
   \   00000068   86A4               STD     Z+12, R10
   \   0000006A   86B5               STD     Z+13, R11
   \   0000006C   86C6               STD     Z+14, R12
   \   0000006E   86D7               STD     Z+15, R13
   \   00000070   8AE0               STD     Z+16, R14
   \   00000072   8AF1               STD     Z+17, R15
     87              Timer.Channel[Timer.Added].Event = Event;
   \   00000074   9100....           LDS     R16, Timer
   \   00000078   E010               LDI     R17, 0
   \   0000007A   E143               LDI     R20, 19
   \   0000007C   E050               LDI     R21, 0
   \   0000007E   ........           CALL    ?S_EC_MUL_L02
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   00000086   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   00000088   8B22               STD     Z+18, R18
   \   0000008A   8B33               STD     Z+19, R19
     88              
     89              Timer.Channel[Timer.Added].Enable = ENABLE;
   \   0000008C   9100....           LDS     R16, Timer
   \   00000090   E010               LDI     R17, 0
   \   00000092   E143               LDI     R20, 19
   \   00000094   E050               LDI     R21, 0
   \   00000096   ........           CALL    ?S_EC_MUL_L02
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   000000A0   E001               LDI     R16, 1
   \   000000A2   8301               STD     Z+1, R16
     90              Timer.Added++;
   \   000000A4   9100....           LDS     R16, Timer
   \   000000A8   9503               INC     R16
   \   000000AA   9300....           STS     Timer, R16
     91            }
     92            else
     93            {
     94              __enable_interrupt();
     95              return TIMER_CHANNELOUTOFRANGE;
     96            }
     97          
     98            __enable_interrupt();
   \   000000AE   9478               SEI
     99            return (Timer.Added-1);
   \   000000B0   9100....           LDS     R16, Timer
   \   000000B4   950A               DEC     R16
   \   000000B6   C002               RJMP    ??TIMER_Add_1
   \                     ??TIMER_Add_0:
   \   000000B8   9478               SEI
   \   000000BA   EF0F               LDI     R16, 255
   \                     ??TIMER_Add_1:
   \   000000BC   E1E2               LDI     R30, 18
   \   000000BE   ........           JMP     ?EPILOGUE_B16_L09
    100          }
    101          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
    102          void  TIMER_SetEnable(U8 Channel, BIT Value)
   \                     TIMER_SetEnable:
    103          {
   \   00000000   2F20               MOV     R18, R16
   \   00000002   2F31               MOV     R19, R17
    104            if(Channel<Timer.Added)
   \   00000004   9100....           LDS     R16, Timer
   \   00000008   1720               CP      R18, R16
   \   0000000A   F450               BRCC    ??TIMER_SetEnable_0
    105            {
    106              Timer.Channel[Channel].Enable = Value;						
   \   0000000C   2F02               MOV     R16, R18
   \   0000000E   E010               LDI     R17, 0
   \   00000010   E143               LDI     R20, 19
   \   00000012   E050               LDI     R21, 0
   \   00000014   ........           CALL    ?S_EC_MUL_L02
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   0000001E   8331               STD     Z+1, R19
    107            }
    108          }
   \                     ??TIMER_SetEnable_0:
   \   00000020   9508               RET
    109          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
    110          void  TIMER_SetCount(U8 Channel, U64 Count)
   \                     TIMER_SetCount:
    111          {
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   2F20               MOV     R18, R16
   \   00000006   8888               LDD     R8, Y+16
   \   00000008   8899               LDD     R9, Y+17
   \   0000000A   88AA               LDD     R10, Y+18
   \   0000000C   88BB               LDD     R11, Y+19
   \   0000000E   88CC               LDD     R12, Y+20
   \   00000010   88DD               LDD     R13, Y+21
   \   00000012   88EE               LDD     R14, Y+22
   \   00000014   88FF               LDD     R15, Y+23
    112            if(Channel<Timer.Added)
   \   00000016   9100....           LDS     R16, Timer
   \   0000001A   1720               CP      R18, R16
   \   0000001C   F4E8               BRCC    ??TIMER_SetCount_0
    113            {
    114              if(Timer.Channel[Channel].Enable)
   \   0000001E   2F02               MOV     R16, R18
   \   00000020   E010               LDI     R17, 0
   \   00000022   E143               LDI     R20, 19
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   00000030   8101               LDD     R16, Z+1
   \   00000032   2300               TST     R16
   \   00000034   F089               BREQ    ??TIMER_SetCount_0
    115              {
    116                Timer.Channel[Channel].Count = Count;
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E143               LDI     R20, 19
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   00000048   8282               STD     Z+2, R8
   \   0000004A   8293               STD     Z+3, R9
   \   0000004C   82A4               STD     Z+4, R10
   \   0000004E   82B5               STD     Z+5, R11
   \   00000050   82C6               STD     Z+6, R12
   \   00000052   82D7               STD     Z+7, R13
   \   00000054   86E0               STD     Z+8, R14
   \   00000056   86F1               STD     Z+9, R15
    117              }	
    118            }	
    119          }
   \                     ??TIMER_SetCount_0:
   \   00000058   E1E8               LDI     R30, 24
   \   0000005A   ........           JMP     ?EPILOGUE_B16_L09
    120          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
    121          U64  TIMER_GetCount(U8 Channel)
   \                     TIMER_GetCount:
    122          {
   \   00000000   2E20               MOV     R2, R16
    123            if(Channel<Timer.Added)
   \   00000002   9100....           LDS     R16, Timer
   \   00000006   1620               CP      R2, R16
   \   00000008   F4F0               BRCC    ??TIMER_GetCount_0
    124            {
    125              if(Timer.Channel[Channel].Enable)
   \   0000000A   2D02               MOV     R16, R2
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E143               LDI     R20, 19
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   0000001C   8101               LDD     R16, Z+1
   \   0000001E   2300               TST     R16
   \   00000020   F091               BREQ    ??TIMER_GetCount_0
    126              {
    127                return Timer.Channel[Channel].Count;				
   \   00000022   2D02               MOV     R16, R2
   \   00000024   E010               LDI     R17, 0
   \   00000026   E143               LDI     R20, 19
   \   00000028   E050               LDI     R21, 0
   \   0000002A   ........           CALL    ?S_EC_MUL_L02
   \   0000002E   01F8               MOVW    R31:R30, R17:R16
   \   00000030   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   00000032   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   00000034   8102               LDD     R16, Z+2
   \   00000036   8113               LDD     R17, Z+3
   \   00000038   8124               LDD     R18, Z+4
   \   0000003A   8135               LDD     R19, Z+5
   \   0000003C   8146               LDD     R20, Z+6
   \   0000003E   8157               LDD     R21, Z+7
   \   00000040   8560               LDD     R22, Z+8
   \   00000042   8571               LDD     R23, Z+9
   \   00000044   9508               RET
    128              }	
    129            }
    130          
    131            return RESET;
   \                     ??TIMER_GetCount_0:
   \   00000046   E000               LDI     R16, 0
   \   00000048   E010               LDI     R17, 0
   \   0000004A   E020               LDI     R18, 0
   \   0000004C   E030               LDI     R19, 0
   \   0000004E   E040               LDI     R20, 0
   \   00000050   E050               LDI     R21, 0
   \   00000052   E060               LDI     R22, 0
   \   00000054   E070               LDI     R23, 0
   \   00000056   9508               RET
    132          }
    133          /************************************************** Tasks *************************************************************/
    134          /*
    135              Nothing
    136          */
    137          /************************************************** Vectors ***********************************************************/
    138          // IAR C interrupt  handler
    139          #pragma vector=TIMER1_COMPA_vect

   \                                 In  segment CODE, align 2, keep-with-next
    140          __interrupt void TIMER1_COMPA_ISR(void)
   \                     ??TIMER1_COMPA_ISR:
    141          {
   \   00000000   92FA               ST      -Y, R15
   \   00000002   92EA               ST      -Y, R14
   \   00000004   92DA               ST      -Y, R13
   \   00000006   92CA               ST      -Y, R12
   \   00000008   92BA               ST      -Y, R11
   \   0000000A   92AA               ST      -Y, R10
   \   0000000C   929A               ST      -Y, R9
   \   0000000E   928A               ST      -Y, R8
   \   00000010   93AA               ST      -Y, R26
   \   00000012   939A               ST      -Y, R25
   \   00000014   938A               ST      -Y, R24
   \   00000016   93FA               ST      -Y, R31
   \   00000018   93EA               ST      -Y, R30
   \   0000001A   923A               ST      -Y, R3
   \   0000001C   922A               ST      -Y, R2
   \   0000001E   921A               ST      -Y, R1
   \   00000020   920A               ST      -Y, R0
   \   00000022   937A               ST      -Y, R23
   \   00000024   936A               ST      -Y, R22
   \   00000026   935A               ST      -Y, R21
   \   00000028   934A               ST      -Y, R20
   \   0000002A   933A               ST      -Y, R19
   \   0000002C   932A               ST      -Y, R18
   \   0000002E   931A               ST      -Y, R17
   \   00000030   930A               ST      -Y, R16
   \   00000032   B79F               IN      R25, 0x3F
   \   00000034                      REQUIRE ?Register_R8_is_cg_reg
   \   00000034                      REQUIRE ?Register_R9_is_cg_reg
   \   00000034                      REQUIRE ?Register_R10_is_cg_reg
   \   00000034                      REQUIRE ?Register_R11_is_cg_reg
   \   00000034                      REQUIRE ?Register_R12_is_cg_reg
   \   00000034                      REQUIRE ?Register_R13_is_cg_reg
   \   00000034                      REQUIRE ?Register_R14_is_cg_reg
   \   00000034                      REQUIRE ?Register_R15_is_cg_reg
    142              for(U8 Index=RESET; Index<Timer.Added; Index++)
   \   00000034   E0A0               LDI     R26, 0
   \                     ??TIMER1_COMPA_ISR_1:
   \   00000036   9100....           LDS     R16, Timer
   \   0000003A   17A0               CP      R26, R16
   \   0000003C   F008               BRCS    $+2+2
   \   0000003E   C0BF               RJMP    ??TIMER1_COMPA_ISR_2
    143              {
    144                  if(Timer.Channel[Index].Enable)
   \   00000040   2F0A               MOV     R16, R26
   \   00000042   E010               LDI     R17, 0
   \   00000044   E143               LDI     R20, 19
   \   00000046   E050               LDI     R21, 0
   \   00000048   ........           CALL    ?S_EC_MUL_L02
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   00000050   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   00000052   8101               LDD     R16, Z+1
   \   00000054   2300               TST     R16
   \   00000056   F409               BRNE    $+2+2
   \   00000058   C0B0               RJMP    ??TIMER1_COMPA_ISR_3
    145                  {
    146                      if(Timer.Channel[Index].Count < 0xFFFFFFFFFFFFFFFF)
   \   0000005A   2F0A               MOV     R16, R26
   \   0000005C   E010               LDI     R17, 0
   \   0000005E   E143               LDI     R20, 19
   \   00000060   E050               LDI     R21, 0
   \   00000062   ........           CALL    ?S_EC_MUL_L02
   \   00000066   01F8               MOVW    R31:R30, R17:R16
   \   00000068   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   0000006A   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   0000006C   8102               LDD     R16, Z+2
   \   0000006E   8113               LDD     R17, Z+3
   \   00000070   8124               LDD     R18, Z+4
   \   00000072   8135               LDD     R19, Z+5
   \   00000074   8146               LDD     R20, Z+6
   \   00000076   8157               LDD     R21, Z+7
   \   00000078   8560               LDD     R22, Z+8
   \   0000007A   8571               LDD     R23, Z+9
   \   0000007C   ....               LDI     R30, LOW(__Constant_ffffffff_ffffffff)
   \   0000007E   ....               LDI     R31, (__Constant_ffffffff_ffffffff) >> 8
   \   00000080   ........           CALL    ?LL_CMP_L12
   \   00000084   F171               BREQ    ??TIMER1_COMPA_ISR_4
    147                      {
    148                          Timer.Channel[Index].Count++;
   \   00000086   2F0A               MOV     R16, R26
   \   00000088   E010               LDI     R17, 0
   \   0000008A   E143               LDI     R20, 19
   \   0000008C   E050               LDI     R21, 0
   \   0000008E   ........           CALL    ?S_EC_MUL_L02
   \   00000092   01F8               MOVW    R31:R30, R17:R16
   \   00000094   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   00000096   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   00000098   8102               LDD     R16, Z+2
   \   0000009A   8113               LDD     R17, Z+3
   \   0000009C   8124               LDD     R18, Z+4
   \   0000009E   8135               LDD     R19, Z+5
   \   000000A0   8146               LDD     R20, Z+6
   \   000000A2   8157               LDD     R21, Z+7
   \   000000A4   8560               LDD     R22, Z+8
   \   000000A6   8571               LDD     R23, Z+9
   \   000000A8   5F0F               SUBI    R16, 255
   \   000000AA   4F1F               SBCI    R17, 255
   \   000000AC   4F2F               SBCI    R18, 255
   \   000000AE   4F3F               SBCI    R19, 255
   \   000000B0   4F4F               SBCI    R20, 255
   \   000000B2   4F5F               SBCI    R21, 255
   \   000000B4   4F6F               SBCI    R22, 255
   \   000000B6   4F7F               SBCI    R23, 255
   \   000000B8   0148               MOVW    R9:R8, R17:R16
   \   000000BA   0159               MOVW    R11:R10, R19:R18
   \   000000BC   016A               MOVW    R13:R12, R21:R20
   \   000000BE   017B               MOVW    R15:R14, R23:R22
   \   000000C0   2F0A               MOV     R16, R26
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E143               LDI     R20, 19
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   000000D2   8282               STD     Z+2, R8
   \   000000D4   8293               STD     Z+3, R9
   \   000000D6   82A4               STD     Z+4, R10
   \   000000D8   82B5               STD     Z+5, R11
   \   000000DA   82C6               STD     Z+6, R12
   \   000000DC   82D7               STD     Z+7, R13
   \   000000DE   86E0               STD     Z+8, R14
   \   000000E0   86F1               STD     Z+9, R15
    149                      }				
    150                      if(Timer.Channel[Index].Period)
   \                     ??TIMER1_COMPA_ISR_4:
   \   000000E2   2F0A               MOV     R16, R26
   \   000000E4   E010               LDI     R17, 0
   \   000000E6   E143               LDI     R20, 19
   \   000000E8   E050               LDI     R21, 0
   \   000000EA   ........           CALL    ?S_EC_MUL_L02
   \   000000EE   01F8               MOVW    R31:R30, R17:R16
   \   000000F0   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   000000F2   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   000000F4   8502               LDD     R16, Z+10
   \   000000F6   8513               LDD     R17, Z+11
   \   000000F8   8524               LDD     R18, Z+12
   \   000000FA   8535               LDD     R19, Z+13
   \   000000FC   8546               LDD     R20, Z+14
   \   000000FE   8557               LDD     R21, Z+15
   \   00000100   8960               LDD     R22, Z+16
   \   00000102   8971               LDD     R23, Z+17
   \   00000104   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000106   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000108   ........           CALL    ?LL_CMP_L12
   \   0000010C   F409               BRNE    $+2+2
   \   0000010E   C055               RJMP    ??TIMER1_COMPA_ISR_3
    151                      {
    152                          if(Timer.Channel[Index].Event)
   \   00000110   2F0A               MOV     R16, R26
   \   00000112   E010               LDI     R17, 0
   \   00000114   E143               LDI     R20, 19
   \   00000116   E050               LDI     R21, 0
   \   00000118   ........           CALL    ?S_EC_MUL_L02
   \   0000011C   01F8               MOVW    R31:R30, R17:R16
   \   0000011E   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   00000120   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   00000122   8922               LDD     R18, Z+18
   \   00000124   8933               LDD     R19, Z+19
   \   00000126   E000               LDI     R16, LOW(0)
   \   00000128   E010               LDI     R17, (0) >> 8
   \   0000012A   1720               CP      R18, R16
   \   0000012C   0731               CPC     R19, R17
   \   0000012E   F409               BRNE    $+2+2
   \   00000130   C044               RJMP    ??TIMER1_COMPA_ISR_3
    153                          {
    154                              if(Timer.Channel[Index].Count >= Timer.Channel[Index].Period)
   \   00000132   2F0A               MOV     R16, R26
   \   00000134   E010               LDI     R17, 0
   \   00000136   E143               LDI     R20, 19
   \   00000138   E050               LDI     R21, 0
   \   0000013A   ........           CALL    ?S_EC_MUL_L02
   \   0000013E   01F8               MOVW    R31:R30, R17:R16
   \   00000140   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   00000142   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   00000144   8082               LDD     R8, Z+2
   \   00000146   8093               LDD     R9, Z+3
   \   00000148   80A4               LDD     R10, Z+4
   \   0000014A   80B5               LDD     R11, Z+5
   \   0000014C   80C6               LDD     R12, Z+6
   \   0000014E   80D7               LDD     R13, Z+7
   \   00000150   84E0               LDD     R14, Z+8
   \   00000152   84F1               LDD     R15, Z+9
   \   00000154   ....               LDI     R30, LOW((Timer + 10))
   \   00000156   ....               LDI     R31, HIGH((Timer + 10))
   \   00000158   2F0A               MOV     R16, R26
   \   0000015A   E010               LDI     R17, 0
   \   0000015C   E143               LDI     R20, 19
   \   0000015E   E050               LDI     R21, 0
   \   00000160   ........           CALL    ?S_EC_MUL_L02
   \   00000164   0FE0               ADD     R30, R16
   \   00000166   1FF1               ADC     R31, R17
   \   00000168   ........           CALL    ?LL_CMP_R8_L12
   \   0000016C   F130               BRCS    ??TIMER1_COMPA_ISR_3
    155                              {
    156                                  Timer.Channel[Index].Count = RESET;
   \   0000016E   2F0A               MOV     R16, R26
   \   00000170   E010               LDI     R17, 0
   \   00000172   E143               LDI     R20, 19
   \   00000174   E050               LDI     R21, 0
   \   00000176   ........           CALL    ?S_EC_MUL_L02
   \   0000017A   01F8               MOVW    R31:R30, R17:R16
   \   0000017C   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   0000017E   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   00000180   E000               LDI     R16, 0
   \   00000182   8302               STD     Z+2, R16
   \   00000184   E000               LDI     R16, 0
   \   00000186   8303               STD     Z+3, R16
   \   00000188   E000               LDI     R16, 0
   \   0000018A   8304               STD     Z+4, R16
   \   0000018C   E000               LDI     R16, 0
   \   0000018E   8305               STD     Z+5, R16
   \   00000190   E000               LDI     R16, 0
   \   00000192   8306               STD     Z+6, R16
   \   00000194   E000               LDI     R16, 0
   \   00000196   8307               STD     Z+7, R16
   \   00000198   E000               LDI     R16, 0
   \   0000019A   8700               STD     Z+8, R16
   \   0000019C   E000               LDI     R16, 0
   \   0000019E   8701               STD     Z+9, R16
    157                                  (*Timer.Channel[Index].Event)();
   \   000001A0   2F0A               MOV     R16, R26
   \   000001A2   E010               LDI     R17, 0
   \   000001A4   E143               LDI     R20, 19
   \   000001A6   E050               LDI     R21, 0
   \   000001A8   ........           CALL    ?S_EC_MUL_L02
   \   000001AC   01F8               MOVW    R31:R30, R17:R16
   \   000001AE   ....               SUBI    R30, LOW((-(Timer) & 0xFFFF))
   \   000001B0   ....               SBCI    R31, (-(Timer) & 0xFFFF) >> 8
   \   000001B2   8902               LDD     R16, Z+18
   \   000001B4   8913               LDD     R17, Z+19
   \   000001B6   01F8               MOVW    R31:R30, R17:R16
   \   000001B8   9509               ICALL
    158                              }
    159                          }
    160                      }		
    161                  }
    162              }
   \                     ??TIMER1_COMPA_ISR_3:
   \   000001BA   95A3               INC     R26
   \   000001BC   CF3C               RJMP    ??TIMER1_COMPA_ISR_1
    163          }
   \                     ??TIMER1_COMPA_ISR_2:
   \   000001BE   BF9F               OUT     0x3F, R25
   \   000001C0   9109               LD      R16, Y+
   \   000001C2   9119               LD      R17, Y+
   \   000001C4   9129               LD      R18, Y+
   \   000001C6   9139               LD      R19, Y+
   \   000001C8   9149               LD      R20, Y+
   \   000001CA   9159               LD      R21, Y+
   \   000001CC   9169               LD      R22, Y+
   \   000001CE   9179               LD      R23, Y+
   \   000001D0   9009               LD      R0, Y+
   \   000001D2   9019               LD      R1, Y+
   \   000001D4   9029               LD      R2, Y+
   \   000001D6   9039               LD      R3, Y+
   \   000001D8   91E9               LD      R30, Y+
   \   000001DA   91F9               LD      R31, Y+
   \   000001DC   9189               LD      R24, Y+
   \   000001DE   9199               LD      R25, Y+
   \   000001E0   91A9               LD      R26, Y+
   \   000001E2   9089               LD      R8, Y+
   \   000001E4   9099               LD      R9, Y+
   \   000001E6   90A9               LD      R10, Y+
   \   000001E8   90B9               LD      R11, Y+
   \   000001EA   90C9               LD      R12, Y+
   \   000001EC   90D9               LD      R13, Y+
   \   000001EE   90E9               LD      R14, Y+
   \   000001F0   90F9               LD      R15, Y+
   \   000001F2   9518               RETI

   \                                 In  segment INTVEC, offset 0x1c, root
   \                     `??TIMER1_COMPA_ISR::??INTVEC 28`:
   \   0000001C   ........           JMP     ??TIMER1_COMPA_ISR

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_0`:
   \   00000000   FFFFFFFFFFFF       DD 4294967295, 4294967295
   \              FFFF        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_ffffffff_ffffffff:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_0`

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_1`:
   \   00000000   000000000000       DD 0, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_0_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_1`
    164          /**********************************************************************************************************************/
    165          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     40      2   CalculateCompareValue
       40      2 ?LL_MUL_L12
       40      2 ?ULL_DIV_L12
     25      2   TIMER1_COMPA_ISR()
       25      2   -- Indirect call
       25      2 ?LL_CMP_L12
       25      2 ?LL_CMP_R8_L12
       25      2 ?S_EC_MUL_L02
     18      2   TIMER_Add
       18      2 ?S_EC_MUL_L02
      0      2   TIMER_GetCount
        0      2 ?S_EC_MUL_L02
     24      2   TIMER_SetCount
       24      2 ?S_EC_MUL_L02
      0      2   TIMER_SetEnable
        0      2 ?S_EC_MUL_L02
      0      2   __init_Timer
        0      2   -> CalculateCompareValue


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Initializer for 64 Bit Constant>_0
       8  ?<Initializer for 64 Bit Constant>_1
     144  CalculateCompareValue
     500  TIMER1_COMPA_ISR()
       4  TIMER1_COMPA_ISR()::??INTVEC 28
     194  TIMER_Add
      88  TIMER_GetCount
      94  TIMER_SetCount
      34  TIMER_SetEnable
     153  Timer
       2  _A_OCR1A
       1  _A_TCCR1B
       1  _A_TIMSK
       8  __Constant_0_0
       8  __Constant_ffffffff_ffffffff
      44  __init_Timer
      12  -- Other

 
     4 bytes in segment ABSOLUTE
 1 098 bytes in segment CODE
    12 bytes in segment INITTAB
     4 bytes in segment INTVEC
    16 bytes in segment NEAR_I
    16 bytes in segment NEAR_ID
   153 bytes in segment NEAR_Z
 
 1 098 bytes of CODE memory (+ 32 bytes shared)
   153 bytes of DATA memory (+ 20 bytes shared)

Errors: none
Warnings: none
